<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS | hrchen's blogging]]></title>
  <link href="http://hrchen.com/category/ios/atom.xml" rel="self"/>
  <link href="http://hrchen.com/"/>
  <updated>2013-06-25T23:59:42+08:00</updated>
  <id>http://hrchen.com/</id>
  <author>
    <name><![CDATA[hrchen]]></name>
    <email><![CDATA[dr.hrchen@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[一个异步网络请求问题：关于NSURLConnection和NSRunLoopCommonModes]]></title>
    <link href="http://hrchen.com/2013/06/nsurlconnection-with-nsrunloopcommonmodes/"/>
    <updated>2013-06-24T16:15:00+08:00</updated>
    <id>http://hrchen.com/2013/06/nsurlconnection-with-nsrunloopcommonmodes</id>
    <content type="html"><![CDATA[<p>通常我们开发App时，常常需要异步下载网络资源或者实现REST API调用，目前流行的HTTP库有<a href="https://github.com/pokeb/asi-http-request/">ASIHTTPRequest</a>（已经停止开发维护）和<a href="https://github.com/AFNetworking/AFNetworking">AFNetWorking</a>。两者实现异步下载的方式不太相同，ASIHTTPRequest使用的是每个请求独立子线程和CFNetWork API的技术：</p>

<p>```
+ (NSThread <em>)threadForRequest:(ASIHTTPRequest </em>)request
{</p>

<pre><code>if (networkThread == nil) {
    @synchronized(self) {
        if (networkThread == nil) {
            networkThread = [[NSThread alloc] initWithTarget:self selector:@selector(runRequests) object:nil];
            [networkThread start];
        }
    }
}
return networkThread;
</code></pre>

<p>}
```
AFNetWorking则是使用NSOperation和NSURLConnection的技术实现异步网络通讯，然而它在NSOperation中真正要实现网络请求时，同样生成了一个子线程来执行实际的网络请求：</p>

<p>```
+ (NSThread *)networkRequestThread {</p>

<pre><code>static NSThread *_networkRequestThread = nil;
static dispatch_once_t oncePredicate;
dispatch_once(&amp;oncePredicate, ^{
    _networkRequestThread = [[NSThread alloc] initWithTarget:self selector:@selector(networkRequestThreadEntryPoint:) object:nil];
    [_networkRequestThread start];
});

return _networkRequestThread;
</code></pre>

<p>}
```</p>

<!-- more -->


<p>ASIHTTPRequest和AFNetWorking实际上都里用了子线程配合Run Loop来实现管理网络请求以及
。由于在开发中需要一个简单的网络图片下载功能，不想添加第三方库，也不太想自己包装NSOpertaion以及子线程，能够直接通过NSURLConnection</p>

<p>```
- (void)start
{</p>

<pre><code>NSMutableURLRequest* request = [[NSMutableURLRequest alloc]   
            initWithURL:self.URL
            cachePolicy:NSURLCacheStorageNotAllowed
            timeoutInterval:self.timeoutInterval];
[request setHTTPMethod: @"GET"];
self.connection =[[NSURLConnection alloc] initWithRequest:request
                                                 delegate:self
                                         startImmediately:NO];
[self.connection scheduleInRunLoop:[NSRunLoop currentRunLoop] forMode:NSRunLoopCommonModes];
[self.connection start];
</code></pre>

<p>}</p>

<p>```</p>

<p>```
[downloader performSelectorOnMainThread:@selector(start)</p>

<pre><code>                         withObject:nil 
                      waitUntilDone:YES];
</code></pre>

<p>```</p>

<h3>Sample Code</h3>

<p>看的晕乎乎？理解概念最好的方式当然还是动手写代码，写了个例子放在<a href="https://github.com/hrchen/NSThreadExample">GitHub</a>上，欢迎讨论。</p>

<p>Apple官方也有一个基于Run Loop的异步网络连接样例程序<a href="http://developer.apple.com/library/ios/#samplecode/SimpleURLConnections/Listings/Read_Me_About_SimpleURLConnections_txt.html">SimpleURLConnections</a>，值得一看。</p>

<h3>参考资料</h3>

<p><a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/Multithreading/CreatingThreads/CreatingThreads.html">Threading Programming Guide</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS多线程编程Part 1/3 - NSThread]]></title>
    <link href="http://hrchen.com/2013/06/multi-threading-programming-of-ios-part-1/"/>
    <updated>2013-06-02T23:11:00+08:00</updated>
    <id>http://hrchen.com/2013/06/multi-threading-programming-of-ios-part-1</id>
    <content type="html"><![CDATA[<h3>前言</h3>

<p>多线程的价值无需赘述，对于app性能和用户体验都有着至关重要的意义，在iOS开发中，Apple提供了不同的技术支持多线程编程，除了跨平台的pthread之外，还提供了NSThread、NSOperationQueue、GCD等多线程技术，从本篇Blog开始介绍这几种技术的细节。</p>

<p>对于pthread这种跨平台的多线程技术，这本<a href="http://www.amazon.com/Programming-POSIX-Threads-David-Butenhof/dp/0201633922/">Programming with POSIX Threads</a>做了详细介绍，不再提及。</p>

<h3>NSThread</h3>

<p>使用NSThead创建线程有很多方法：</p>

<ul>
<li>+detachNewThreadSelector:toTarget:withObject:类方法直接生成一个子线程</li>
</ul>


<p><code>objc
[NSThread detachNewThreadSelector:@selector(threadRoutine:) toTarget:self withObject:nil];
</code></p>

<ul>
<li>创建一个NSThread类实例，然后调用start方法。</li>
</ul>


<p><code>objc
NSThread* aThread = [[NSThread alloc] initWithTarget:self selector:@selector(threadRoutine:) object:nil];
[aThread start];
</code></p>

<ul>
<li>调用NSObject的<code>+performSelectorInBackground:withObject:</code>方法生成子线程。</li>
</ul>


<p><code>objc
[myObj performSelectorInBackground:@selector(threadRoutine:) withObject:nil];
</code></p>

<ul>
<li>创建一个NSThread子类，然后调用子类实例的start方法，。</li>
</ul>


<!-- more -->


<p>创建线程也是有开销的，iOS下主要成本包括构造内核数据结构（大约1KB）、栈空间（子线程512KB、主线程1MB，不过可以使用方法<code>-setStackSize:</code>自己设置，注意必须是4K的倍数，而且最小是16K），创建线程大约需要90毫秒的创建时间。</p>

<p>第二种和第四种方法创建的线程有个好处是拥有线程的对象，因此可以使用<code>performSelector:onThread:withObject:waitUntilDone:</code>在该线程上执行方法，这是一种非常方便的线程间通讯的方法（相对于设置麻烦的NSPort用于通讯），所要执行的方法可以直接添加到目标线程的Runloop中执行。Apple建议使用这个接口运行的方法不要是耗时或者频繁的操作，以免导致子线程负载过重。</p>

<p>第三种方法其实与第一种方法是一样的，都会直接生成一个子线程。</p>

<p>上面四种方法生成的子线程都是detached状态，即主线程结束时这些线程都会被直接杀死；如果要生成joinable状态的子线程，只能使用pthread接口啦。</p>

<p>如果在线程的routine入口方法或者拥有线程对象时，还可以设置线程的优先级(<code>-setThreadPriority:</code>)，如果需要在线程中保存一些状态信息，还可以使用到<code>-threadDictionary</code>得到一个NSMutableDictionary，以key-value的方式保存信息用于线程内读写。</p>

<h3>NSThread的入口方法</h3>

<p>要写一个有效的子线程入口方法需要注意很多问题，以下面代码举例：</p>

<p>```</p>

<ul>
<li><p>(void)threadRoutine
{
  NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];</p>

<p>  BOOL moreWorkToDo = YES;
  BOOL exitNow = NO;
  NSRunLoop* runLoop = [NSRunLoop currentRunLoop];</p>

<p>  NSMutableDictionary* threadDict = [[NSThread currentThread] threadDictionary];
  [threadDict setValue:[NSNumber numberWithBool:exitNow] forKey:@"ThreadShouldExitNow"];</p>

<p>  [self myInstallCustomInputSource];</p>

<p>  while (moreWorkToDo &amp;&amp; !exitNow)
  {
      //执行线程真正的工作方法，如果完成了可以设置moreWorkToDo为False</p>

<pre><code>  [runLoop runUntilDate:[NSDate distantFuture]];

  exitNow = [[threadDict valueForKey:@"ThreadShouldExitNow"] boolValue];
</code></pre>

<p>  }</p>

<p>  [pool release];<br/>
}</p></li>
</ul>


<p>```</p>

<ul>
<li>必须创建一个NSAutoreleasePool，因为子线程不会自动创建。同时要注意这个pool因为是最外层pool，如果线程中要进行长时间的操作生成大量autoreleased的对象，则只有在该子线程退出时才会回收，因此如果线程中会大量创建autoreleased对象，那么需要创建额外的NSAutoreleasePool，可以在NSRunloop每次迭代时创建和销毁一个NSAutoreleasePool。</li>
<li>如果你的子线程会抛出异常，最好在子线程中设置一个异常处理函数，因为如果子线程无法处理抛出的异常，会导致程序直接Crash关闭。</li>
<li>(可选)设置Run Loop，如果子线程只是做个一次性的操作，那么无需设置Run Loop；如果子线程进入一个循环需要不断处理一些事件，那么设置一个Run Loop是最好的处理方式，如果需要Timer，那么Run Loop就是必须的。</li>
<li>如果需要在子线程运行的时候让子线程结束操作，子线程每次Run Loop迭代中检查相应的标志位来判断是否还需要继续执行，可以使用threadDictionary以及设置Input Source的方式来通知这个子线程。那么什么是RunLoop呢？</li>
</ul>


<h3>RunLoop</h3>

<p>NSRunLoop一直都是个比较让人迷惑的概念，相关的介绍资料也很少，主要的特性如下：</p>

<ul>
<li>每个线程都有一个Run Loop，主线程的Run Loop会在App运行时被运行，子线程需要手动设置运行。</li>
<li>每个Run Loop都会以一个模式mode来运行，，可以使用<code>- (BOOL)runMode:(NSString *)mode beforeDate:(NSDate *)limitDate</code> 来运行某个特定模式mode。</li>
<li>Run Loop的主要作用是监听Timer和Input Source，每个事件源都会绑定在Run Loop的某个特定模式mode上，而且只有RunLoop在这个模式运行的时候才会触发该Timer和Input Source。</li>
</ul>


<p>Run Loop的作用是什么呢？在上一节NSThread的入口函数中已经说明了一种NSRunLoop的使用场景，下面再看一例：</p>

<p>```
- (void)main
{</p>

<pre><code>@autoreleasepool {
    NSLog(@"starting thread.......");
    NSTimer *timer = [NSTimer timerWithTimeInterval:2 target:self selector:@selector(doTimerTask) userInfo:nil repeats:YES];
    [[NSRunLoop currentRunLoop] addTimer:timer forMode:NSDefaultRunLoopMode];
    [timer release];
    while (! self.isCancelled) {
        [self doOtherTask];
        BOOL ret = [[NSRunLoop currentRunLoop] runMode:NSDefaultRunLoopMode beforeDate:[NSDate distantFuture]];
        NSLog(@"after runloop counting.........: %d", ret);
    }
    NSLog(@"finishing thread.........");
}
</code></pre>

<p>}</p>

<ul>
<li><p>(void)doTimerTask
{
  NSLog(@"do timer task");
}</p></li>
<li><p>(void)doOtherTask
{
  NSLog(@"do other task");
}
```</p></li>
</ul>


<p>我们看到入口方法里创建了一个NSTimer，并且以NSDefaultRunLoopMode模式加入到当前子线程的NSRunLoop中，正常情况肯定会执行<code>-doOtherTask</code>方式法一次，然后再以NSDefaultRunLoopMode模式运行NSRunLoop，你觉得他会返回吗？答案是不会。NSRunLoop的底层实现是CFRunLoop，内部实现不清楚，感觉应该类似Linux下Select实现机制，当在Timer执行一次后，Run Loop会让子线程进入sleep等待状态，当有新的Timer Source或者Input Source事件发生时，子线程才会被唤醒，继续执行一次触发的Timer事件，但是Timer source比较特殊，存在Timer Source时，<code>- (BOOL)runMode:(NSString *)mode beforeDate:(NSDate *)limitDate;</code>方法自身仍然不会返回，有趣吧。如果在生成Timer时repeats参数设置为NO，那么<code>-runMode:BeforDate</code>方法在处理以此Timer事件会返回YES，之后由于没有了Timer及其他事件源，所以NSRunLoop运行<code>-runMode:BeforDate</code>方法会立刻返回NO，不再等待事件，打印出来的Log像下面这样：</p>

<p><code>
2013-06-18 14:59:44.447 CtripTest[13456:3007] after runloop counting.........: 0
2013-06-18 14:59:44.448 CtripTest[13456:3007] do other task
2013-06-18 14:59:44.448 CtripTest[13456:3007] after runloop counting.........: 0
2013-06-18 14:59:44.448 CtripTest[13456:3007] do other task
2013-06-18 14:59:44.449 CtripTest[13456:3007] after runloop counting.........: 0
2013-06-18 14:59:44.449 CtripTest[13456:3007] do other task
2013-06-18 14:59:44.450 CtripTest[13456:3007] after runloop counting.........: 0
2013-06-18 14:59:44.450 CtripTest[13456:3007] do other task
</code></p>

<p>当你将子线程的Run Loop运行在一个模式时，如果该模式下没有事件源，运行Run Loop会立刻返回NO。如果你添加一个Input Source，例如<code>[[NSRunLoop currentRunLoop] addPort:[NSMachPort port] forMode:NSDefaultRunLoopMode];</code>或者持有子线程的对象在这个子线程上运行方法，例如<code>[self performSelector:@selector(doThreadTask) onThread:thread withObject:nil waitUntilDone:NO];</code>就会让这个Run Loop进入等待状态，即<code>-runMode:BeforDate</code>处于阻塞状态不返回。</p>

<p>当然，如果<code>-runMode:BeforDate</code>的第二个参数是<code>[NSDate dateWithTimeIntervalSinceNow:5]</code>，那么Run Loop在等待5秒后一样会返回，而不是像<code>[NSDate distantFuture]</code>那样会一直等待下去。</p>

<h3>RunLoop事件源</h3>

<p>归根结底，Run Loop就是个处理事件的机制，可以让你有机会唤醒休眠的(asleep)的线程来处理异步事件。Run Loop的事件源事件源分两类：Timer Source和Input Source(包括-performSelector:***API调用簇，Port Input Source、自定义Input Source)。</p>

<p><img src="/images/post/runloop_source.jpg"></p>

<p>1) Timer Souce就是创建Timer添加到Run Loop中，没啥好说的，Cocoa或者Core Foundation都有相应接口实现。需要注意的是<code>scheduledTimerWith****</code>开头生成的Timer会自动帮你加载到当前的Run Loop中，而其他接口生成的Timer则需要你手动使用<code>-addTimer:forMode</code>添加到Run Loop中。需要额外注意的是Timer的触发不会让Run Loop返回。(Timer sources deliver events to their handler routines but do not cause the run loop to exit.) 具体实验可以看下面的Sample Code。</p>

<p>2) Input Source中的-performSelector:***API调用簇方法，有以下这些接口：</p>

<p>```
performSelectorOnMainThread:withObject:waitUntilDone:
performSelectorOnMainThread:withObject:waitUntilDone:modes:</p>

<p>performSelector:onThread:withObject:waitUntilDone:
performSelector:onThread:withObject:waitUntilDone:modes:</p>

<p>performSelector:withObject:afterDelay:
performSelector:withObject:afterDelay:inModes:</p>

<p>cancelPreviousPerformRequestsWithTarget:
cancelPreviousPerformRequestsWithTarget:selector:object:</p>

<p>```</p>

<p>这些API最后两个是取消当前线程中调用，其他API是在主线程或者当前线程下一个Run Loop循环中执行指定的@selector。</p>

<p>3) Port Input Source：概念上也比较简单，可以用NSMachPort作为线程之间的通讯通道。例如在主线程创建子线程时传入一个NSPort对象，这样主线程就可以和这个子线程通讯啦，如果要实现双向通讯，那么子线程也需要回传给主线程一个NSPort。</p>

<p>NSPort的子类除了NSMachPort，还可以使用NSMessagePort或者Core Foundation中的CFMessagePortRef。</p>

<h4>注意：虽然有这么棒的方式实现线程间通讯方式，但是估计由于危及iOS的Sandbox沙盒环境，所以这些API都是私有接口，如果你用到NSPortMessage，XCode会提示<code>'NSPortMessage' for instance message is a forward declaration</code>。</h4>

<p>4) 自定义Input Source：</p>

<p>向Run Loop添加自定义Input Source只能使用Core Foundation的接口：<code>CFRunLoopSourceCreate</code>创建一个source，<code>CFRunLoopAddSource</code>向Run Loop中添加source，<code>CFRunLoopRemoveSource</code>从Run Loop中删除source，<code>CFRunLoopSourceSignal</code>通知source，<code>CFRunLoopWakeUp</code>唤醒Run Loop。</p>

<p>Apple官方文档提供了一个自定义Input Source使用模式。</p>

<p><img src="/images/post/input_source.jpg"></p>

<p>主线程持有子线程的Run Loop和Source，还有一个用于保存需要运行操作的数据buffer。主线程需要子线程干活时，首先将需要的操作数据添加到数据buffer，然后通知source，唤醒子线程Run Loop（因为子线程可能正在sleep状态，<code>CFRunLoopWakeUp</code>唤醒Run Loop可以通知线程醒来干活），由于子线程也持有这个source和数据buffer，因此在触发唤醒时可以使用这个数据buffer的数据来执行相关操作（需要注意数据buffer访问时的同步）。</p>

<p>具体的实现参见下面的Sample Code。</p>

<h3>Run Loop的Mode</h3>

<p>iOS下Run Loop的主要mode有：</p>

<p>1) NSDefaultRunLoopMode: 默认的运行模式，除了NSConnection对象的事件。</p>

<p>This is a configurable group of commonly used modes. Associating an input source with this mode also associates it with each of the modes in the group.</p>

<p>2) NSRunLoopCommonModes: 是一组常用的模式集合，将一个input source关联到这个模式集合上，等于将input source关联到这个模式集合中的所有模式上。如果在Mac下还有NSConnectionReplyMode、NSModalPanelRunLoopMode、NSEventTrackingRunLoopMode这些模式，我有个timer要关联到这些模式上，一个个注册很麻烦，我可以用<code>CFRunLoopAddCommonMode([[NSRunLoop currentRunLoop] getCFRunLoop],(__bridge CFStringRef) NSEventTrackingRunLoopMode)</code>将NSEventTrackingRunLoopMode或者其他模式添加到这个NSRunLoopCommonModes模式中，然后只需要将Timer关联到NSRunLoopCommonModes，即可以实现Run Loop运行在这个模式集合中任何一个模式时，这个Timer都可以被触发。然而由于iOS不像Mac OS公开了其他的众多Run Loop模式，所以其实也没法使用CFRunLoopAddCommonMode做额外操作。</p>

<p>3) UITrackingRunLoopMode: 用于跟踪控件事件触发的模式，主线程当控件事件触发时会设置为这个模式，可以用来在控件事件触发过程中设置Timer。</p>

<h3>Run Loop的Observer</h3>

<p>Run Loop的观察者能够在Run Loop触发以下事件时得到通知：</p>

<ul>
<li>Run loop的进入</li>
<li>Run loop处理一个Timer的时刻</li>
<li>Run loop处理一个Input Source的时刻</li>
<li>Run loop进入睡眠的时刻</li>
<li>Run loop被唤醒的时刻，但在唤醒它的事件被处理之前</li>
<li>Run loop的终止</li>
</ul>


<p>Observer的创建以及添加到Run Loop中需要使用Core Foundation的接口：</p>

<p>```
CFRunLoopObserverContext  context = {0, (__bridge void *)(self), NULL, NULL, NULL};
CFRunLoopObserverRef observer = CFRunLoopObserverCreate(kCFAllocatorDefault, kCFRunLoopBeforeTimers, YES, 0, &amp;myRunLoopObserver, &amp;context);<br/>
if (observer)
{</p>

<pre><code>CFRunLoopAddObserver(CFRunLoopGetCurrent(), observer,
                             kCFRunLoopCommonModes);
</code></pre>

<p>}
```
首先创建Observer的context，然后调用Core Foundation方法CFRunLoopObserverCreate创建Observer，再加入到当前线程的Run Loop中，注意CFRunLoopObserverCreate方法的第二个参数是Observer观察类型，有如下几种：</p>

<p>```
/<em> Run Loop Observer Activities </em>/
typedef CF_OPTIONS(CFOptionFlags, CFRunLoopActivity) {</p>

<pre><code>kCFRunLoopEntry = (1UL &lt;&lt; 0),
kCFRunLoopBeforeTimers = (1UL &lt;&lt; 1),
kCFRunLoopBeforeSources = (1UL &lt;&lt; 2),
kCFRunLoopBeforeWaiting = (1UL &lt;&lt; 5),
kCFRunLoopAfterWaiting = (1UL &lt;&lt; 6),
kCFRunLoopExit = (1UL &lt;&lt; 7),
kCFRunLoopAllActivities = 0x0FFFFFFFU
</code></pre>

<p>};</p>

<p>```
刚好对应Run Loop的各种事件，kCFRunLoopAllActivities比较特殊，可以观察所有事件。具体样例代码请参考Sample Code。</p>

<h3>总结</h3>

<p>Run Loop就是一个处理事件源的循环，你可以控制这个Run Loop运行多久，如果当前没有事件发生，Run Loop会让这个线程进入睡眠状态(避免再浪费CPU时间)，如果有事件发生，Run Loop就处理这个事件。Run Loop的处理事件和发送给Observer通知的流程如下：</p>

<ul>
<li>1) 进入Run Loop运行，此时会通知观察者进入Run Loop；</li>
<li>2) 如果有Timer即将触发时，通知观察者；</li>
<li>3) 如果有非Port的Input Sourc即将e触发时，通知观察者；</li>
<li>4）触发非Port的Input Source事件源；</li>
<li>5）如果基于Port的Input Source事件源即将触发时，立即处理该事件，跳转到步骤9；</li>
<li>6）通知观察者当前线程将进入休眠状态；</li>
<li>7）将线程进入休眠状态直到有以下事件发生：基于Port的Input Source被触发、Timer被触发、Run Loop运行时间到了过期时间、Run Loop被唤醒。</li>
<li>8) 通知观察者线程将要被唤醒。</li>
<li>9) 处理被触发的事件：

<ul>
<li> 如果是用户自定义的Timer，处理Timer事件后重新启动Run Loop进入步骤2；</li>
<li> 如果线程被唤醒又没有到过期时间，则进入步骤2；</li>
<li> 如果是其他Input Source事件源有事件发生，直接处理这个事件；</li>
</ul>
</li>
<li>10)到达此步骤说明Run Loop运行时间到期，或者是非Timer的Input Source事件被处理后，Run Loop将要退出，退出前通知观察者线程已退出。</li>
</ul>


<p>什么时候需要用到Run Loop？官方文档的建议是：</p>

<ul>
<li>需要使用Port或者自定义Input Source与其他线程进行通讯。</li>
<li>需要在线程中使用Timer。</li>
<li>需要在线程上使用performSelector***方法。</li>
<li>需要让线程执行周期性的工作。</li>
</ul>


<h3>Sample Code</h3>

<p>看的晕乎乎？理解概念最好的方式当然还是动手写代码，写了个例子放在<a href="https://github.com/hrchen/NSThreadExample">GitHub</a>上，欢迎讨论。</p>

<p>Apple官方也有一个基于Run Loop的异步网络连接样例程序<a href="http://developer.apple.com/library/ios/#samplecode/SimpleURLConnections/Listings/Read_Me_About_SimpleURLConnections_txt.html">SimpleURLConnections</a>，值得一看。</p>

<h3>参考资料</h3>

<p><a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/Multithreading/CreatingThreads/CreatingThreads.html">Threading Programming Guide</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS App性能优化]]></title>
    <link href="http://hrchen.com/2013/05/performance-with-instruments/"/>
    <updated>2013-05-29T14:20:00+08:00</updated>
    <id>http://hrchen.com/2013/05/performance-with-instruments</id>
    <content type="html"><![CDATA[<h3>iOS App的性能关注点</h3>

<p>虽然iPhone的机能越来越好，但是app的功能也越来越复杂，性能从来都是移动开发的核心关注点之一。我们说一个app性能好，不是简单指感觉运行速度快，而应该是指应用启动快速、UI反馈响应及时、列表滚动操作流畅、内存使用合理，当然更不能随随便便Crash啦。工程师开发应用时除了在设计上要避免性能“坑”的出现，在实际遇到“坑”时也要能很快定位原因所在。定位性能问题原因当然不能靠猜，合理的方法是使用工具测量评估出投资回报最高的问题点，然后再加以优化。</p>

<p>本文会从以下几点介绍如何分析和优化iOS app的性能：启动时间、用户响应、内存、图形动画、文件和网络I/O。其中会用到Apple出品的性能分析神器“Instruments”。</p>

<h3>启动时间</h3>

<p>应用启动时间长短对用户第一次体验至关重要，同时系统对应用的启动、恢复等状态的运行时间也有严格的要求，在应用超时的情况下系统会直接关闭应用。以下是几个常见场景下系统对app运行时间的要求：</p>

<ul>
<li>Launch    20秒</li>
<li><p>Resume    10秒</p></li>
<li><p>Suspend   10秒</p></li>
<li><p>Quit  6秒</p></li>
<li><p>Background Task   10分钟</p></li>
</ul>


<!-- more -->


<p>要获取准确的app启动所需时间，最简单的方法时首先在main.c中添加如下代码：</p>

<p><code>objc
CFAbsoluteTime StartTime;int main(int argc, char **argv) {  StartTime = CFAbsoluteTimeGetCurrent();
</code>然后在AppDelegate的回调方法<code>application:didFinishLaunchingWithOptions</code>中添加：</p>

<pre><code>dispatch_async(dispatch_get_main_queue(), ^{
    NSLog(@”Lauched in %f seconds.”,  (CFAbsoluteTimeGetCurrent() – StartTime)); 
});
</code></pre>

<p>可能你会觉得为什么这样可拿到系统启动的时间，因为这个dispatch_async中提交的工作会在app主线程启动后的下一个run lopp中运行，此时app已经完成了载入并且将要显示第一帧画面，也就是系统会运行到<code>-[UIApplication _reportAppLaunchFinished]</code>之前。下图是用Instruments工具Time Profiler跑的调用栈，Instruments的使用方法建议看WWDC中与performance相关的<a href="https://developer.apple.com/videos/wwdc">session录像</a>，文字写起来太单薄不够直观哈。</p>

<p><img src="/images/post/loading_app.png"></p>

<p>从图中我们可以看到在系统调用<code>[UIApplication _reportAppLaunchFinished]</code>之前完成了系统回调<code>application:didFinishLaunchingWithOptions</code>。</p>

<p>App的启动会包括以下几个部分（来自<a href="https://developer.apple.com/videos/wwdc/2012/">WWDC 2012 Session 235</a>）:</p>

<p>1）链接和载入：可以在Time Profile中显示dyld载入库函数，库会被映射到地址空间，同时完成绑定以及静态初始化。</p>

<p>2）UIKit初始化：如果应用的Root View Controller是由XIB实现的，也会在启动时被初始化。</p>

<p>3）应用回调：调用UIApplicationDeleagte的回调：<code>application:didFinishLaunchingWithOptions</code></p>

<p>4）第一次Core Animation调用：在启动后的方法<code>-[UIApplication _resportAppLaunchFinished]</code>中调用<code>CA::Transaction::commit</code>实现第一帧画面的绘制。如果你的程序启动很慢，能     做的首先是将与显示第一屏画面无关的操作放到之后执行；如果是用XIB文件load第一屏，XIB文件中的View层也要如果扁平，不要有太多图层。</p>

<h3>用户响应</h3>

<p>如何能够让用户觉得你的app响应迅速呢？当然是app用户所触发的操作都能得到立刻响应，即用户事件(User Event)能够被主线程的run loop及时处理。什么是run loop？可以想象成一个处理事件的select多路复用。主线程中的run loop当然主要是为了处理用户产生的事件啦，例如点击、滚动等。以后我们会详细聊聊run loop这个让人迷惑的东东。</p>

<p>要让主线程的run loop更好的响应用户事件，工程师应该尽量减少主线程干重活的时间，尤其是读文件啊，网络操作啊，大量运算啊这类重活，如果是阻塞操作，那就更是大忌了。我们可以用多线程(NSThread、NSOperationQueue, GCD，下一篇Blog就会聊到这多线程)将重活移出主线程，这属于显式并发。还有种隐式并发，例如view和layer的动画、layer的绘制以及PNG图片的解码都是在另一个子线程中执行的。除了使用多线程技术减轻主线程的负担外，减少主线程中阻塞也是提升用户体验的一个方法。使用Instruments中Time Profiler工具中的"Recod thread waiting"选项可以统计出app运行时各个线程中的阻塞系统调用情况，例如文件读写read/write，网络读写send/recv，加锁psynch_mutex_wait等。Instruments中的System Trace工具则能够记录所有的底层系统调用。</p>

<p><img src="/images/post/record_thread_waiting.png"></p>

<h3>内存</h3>

<p>内存问题从来都是iOS app的老大难问题，搞不好程序就爆了。由于iOS系统没有Swap文件(知道为啥不？留给悬念)，在内存不足时会将只读数据(例如code page)从内存中移出，需要的时候再从disk上读如内存；可读写数据不会被系统从内存中移出，然而如果占用的内存达到一个阈值，系统会发出相应的通知和回调让应用release对象以回收内存，如果仍然不能减少内存使用量，系统会直接关闭应用。尤其是iOS 5.0之后，如果你的app收到了memory warning，那么脑袋也是和其他app一样放在了案板上，随时有可能被kill掉，并不是说一定会先Kill掉在后台的app。</p>

<p>App使用的内存除了我们在堆上分配的内存外（<code>+[NSobject alloc]/malloc</code>），还会有更多使用内存的地方，比如代码和全局数据（<strong>TEXT和</strong>DATA），线程栈，图片，view 的layer backing store等等。因此处理内存问题，绝不仅仅是我们开发app时尽量少申请内存那么简单。</p>

<p>现在有了超炫的ARC，内存问题相对少了很多，开发效率也得到了提高。但是很多公司的项目仍然由于历史原因采用了手动管理内存，该做的活还是少不了。Xcode自带的静态分析功能可以帮你提前发现一些问题，然而有些内存问题是无法用静态分析来发现的，例如我们不断使用内存没有及时释放的问题，就无法使用静态分析器分析出来。此时可以使用Instruments的Allocations和Leaks工具来检查运行时的的内存使用以及泄露问题。</p>

<p><img src="/images/post/allocations.png"></p>

<p>Allocations工具可以很直观的反应app的内存使用情况，还有个很赞“Mark Heap”功能，在上图左边下半部分中的Heapshot Analysis中。例如你在进入一个页面前点击一下“Mark Heap”，然后再退回上一页面点击一下“Mark Heap”，如果你在进出这个页面里所申请的内存都得到了合理的释放，那么堆的内存增长量就应该降至0（见上图右下部分）。</p>

<p>另一种严重的内存使用问题是引用了已经释放的内存，直接导致应用崩溃，而Allocation有一个选项Enable NSZombie detection能够在应用使用已经释放的内存时标注出来，同时显示错误发生的调用栈信息。这为解决问题提供了最直接的帮助，当然缺点是必须能够重现EXEC_BAD_ACCESS错误。</p>

<p><img src="/images/post/zombies.png"></p>

<p>工具Leaks可以在应用运行时直接标示出存在内存泄露的代码，如果发生了内存泄露，可以从泄露详细信息中查看泄露的具体对象以及方法调用栈，大部分问题还是很好解决的。</p>

<p><img src="/images/post/leak.png"></p>

<h3>图形和动画</h3>

<p>图形性能对用户体验有直接的影响，Instruments中的Core Animation工具用于测量物理机上的图形性能，通过视图的刷新频率大小来判断应用的图形性能。例如一个复杂的列表滚动时它的刷新率应该努力趋近于60fps才能让用户觉得够流畅，从这个数字也可以算出run loop最长的响应时间应该是16毫秒。</p>

<p>启动Instruments的Core Animation工具后可以发现左下部分有一堆选项，我们来逐个介绍：</p>

<p><img src="/images/post/core_animation.png"></p>

<p>1) Color Blended Layers</p>

<p>Instruments可以在物理机上显示出被混合的图层Blended Layer(用红色标注)，Blended Layer是因为这些Layer是透明的(Transparent)，系统在渲染这些view时需要将该view和下层view混合(Blend)后才能计算出该像素点的实际颜色，如果这种blended layer很多，那么在滚动列表时就甭想有流畅的效果。</p>

<p><img src="/images/post/color_blended_layer.png"></p>

<p>解决blended layer问题也很简单，检查红色区域view的opaque属性，记得设置成YES；检查backgroundColor属性是不是<code>[UIColor clearColor]</code>，要知道背景颜色为clear color那可是图形性能的大敌，基本意味着blended layer是跑不了的了，为什么？自己思考一下:)</p>

<p>2) Color Hits Green and Misses Red</p>

<p>很多视图Layer由于Shadow、Mask和Gradient等原因渲染很高，因此UIKit提供了API用于缓存这些Layer：[layer setShouldRasterize:YES]，系统会将这些Layer缓存成Bitmap位图供渲染使用，如果失效时便丢弃这些Bitmap重新生成。图层Rasterization栅格化好处是对刷新率影响较小，坏处是删格化处理后的Bitmap缓存需要占用内存，而且当图层需要缩放时，要对删格化后的Bitmap做额外计算。
使用这个选项后时，如果Rasterized的Layer失效，便会标注为红色，如果有效标注为绿色。当测试的应用频繁闪现出红色标注图层时，表明对图层做的Rasterization作用不大。</p>

<p>3) Color Misaligned Images</p>

<p>Misaligned Image表示要绘制的点无法直接映射到频幕上的像素点，此时系统需要对相邻的像素点做anti-aliasing反锯齿计算，增加了图形负担，通常这种问题出在对某些View的Frame重新计算和设置时产生的。</p>

<p><img src="/images/post/color_misaligned_image.png"></p>

<p>上图中被标注为黄色的图层，这是由于图层显示的是被缩放后的图片，如果这些图片是通过网络下载的，可以通过程序更新为确定的绘制大小来解决。还有些系统Navigation Bar和Tool Bar的背景图片使用的是拉伸(Streched)图片，也会被表示为黄色，这是属于正常情况，通常无需修改。这种问题一般对性能影响不大，而是可能会在边缘处虚化。</p>

<p>(4) Color Offscreen-Rendered Yellow</p>

<p>Offscreen-Rendering离屏渲染意思是iOS要显示一个视图时，需要先在后台用CPU计算出视图的Bitmap，再交给GPU做Onscreen-Rendering显示在屏幕上，因为显示一个视图需要两次计算，所以这种Offscreen-Rendering会导致app的图形性能下降。</p>

<p>大部分Offscreen-Rendering都是和视图Layer的Shadow和Mask相关，下列情况会导致视图的Offscreen-Rendering：
1. 使用Core Graphics (CG开头的类)。
2.  使用drawRect()方法，即使为空。
3.  将CALayer的属性shouldRasterize设置为YES。
4.  使用了CALayer的setMasksToBounds(masks)和setShadow*(shadow)方法。
5.  在屏幕上直接显示文字，包括Core Text。
6.  设置UIViewGroupOpacity。</p>

<p>这篇博文<a href="http://robots.thoughtbot.com/post/36591648724/designing-for-ios-graphics-performance">Designing for iOS: Graphics &amp; Performance</a>对offsreen以及图形性能有个很棒的介绍，(5) Color Copied Images
Copied Image选项可以标注应用绘制时被Core Animation复制的图片，标注成蓝绿色。虽然我在运行时遇到过，不过个人感觉对图形性能影响不大。
(6) Color Immediately，Flash Updated Regions， Color OpenGL Fast Path Blue
Color Immediately选项表示Instruments在做color-flush操作时取消10毫秒的延时。Flash Updated Regions选项用于用红色示标示出在屏幕上使用GPU计算绘制的图层。Color OpenGL Fast Path Blue选项用于用蓝色标示出在屏幕上由OpenGL compositor绘制的内容。
这三个选项对图形性能的分析意义较小，通常仅作为参考。</p>

<h3>文件和网络I/O</h3>

<p>如果需要对app的文件和网络I/O情况做分析，可以用到这三个Instruments工具System Usage、File Activity和Network。</p>

<p>工具System Usage可以统计出运行状态下应用的文件和网络IO操作数据。例如我们发现应用启动后又一个峰值，这可能存在问题，我们可以利用System Usage工具的详细信息栏查看应用是由于对哪些文件的读写操作导致了峰值。</p>

<p>工具File Activity只能在模拟器中运行，因此数据采集可能不是非常准确。它同样可以详细给出读取的文件属性、大小、载入时间等信息，适合与System Usage配合使用。</p>

<p><img src="/images/post/file_activity.png"></p>

<p>Network工具则可以采集到应用的TCP/IP和UDP的使用信息(传输的数据量、当前所有TCP连接等)，用得不多，做网络使用状况分析时用用还行。</p>

<p><img src="/images/post/instruments_networking.png"></p>

<h3>更多阅读</h3>

<p>涉及iOS App性能的知识很多，上面只是冰山一角，重点推荐WWDC的session。</p>

<p>WWDC 2012:</p>

<ul>
<li>406: Adopting Automatic Reference Counting</li>
<li>238: iOS App Performance: Graphics and Animations</li>
<li>242: iOS App Performance: Memory</li>
<li>235: iOS App Performance: Responsiveness</li>
<li>409: Learning Instruments</li>
<li>706: Networking Best Practices</li>
<li>514: OpenGL ES Tools and Techniques</li>
<li>506: Optimizing 2D Graphics and Animation Performance</li>
<li>601: Optimizing Web Content in UIWebViews and Websites on iOS</li>
<li>225: Up and Running: Making a Great Impression with Every Launch</li>
</ul>


<p>WWDC 2011:</p>

<ul>
<li>105: Polishing Your App: Tips and tricks to improve the responsiveness and performance</li>
<li>121: Understanding UIKit Rendering</li>
<li>131 performance optimization on iphone os</li>
<li>308: Blocks and Grand Central Dispatch in Practice</li>
<li>323: Introducing Automatic Reference Counting</li>
<li>312: iOS Performance and Power Optimization with Instruments</li>
</ul>


<p>还有几篇不错的blog：</p>

<p>http://oleb.net/blog/2011/11/ios5-tech-talk-michael-jurewitz-on-performance-measurement/</p>

<p>http://eng.pulse.me/tips-for-improving-performance-of-your-ios-application/</p>

<p>http://robots.thoughtbot.com/post/36591648724/designing-for-ios-graphics-performance</p>

<p>http://www.touchwonders.com/en/how-to-make-your-apps-feel-responsive-and-fast-part-2/</p>
]]></content>
  </entry>
  
</feed>
