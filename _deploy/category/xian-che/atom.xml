<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 闲扯 | All about mobile things.]]></title>
  <link href="http://hrchen.com/category/xian-che/atom.xml" rel="self"/>
  <link href="http://hrchen.com/"/>
  <updated>2015-04-27T18:07:04+08:00</updated>
  <id>http://hrchen.com/</id>
  <author>
    <name><![CDATA[hrchen]]></name>
    <email><![CDATA[dr.hrchen@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[anti-startup: 反创业]]></title>
    <link href="http://hrchen.com/2015/03/anti-startup/"/>
    <updated>2015-03-30T21:01:00+08:00</updated>
    <id>http://hrchen.com/2015/03/anti-startup</id>
    <content type="html"><![CDATA[<p>最近很多朋友以及公司的同事离职后都去了创业公司，也有不少创业公司拉我入伙。现在创业风潮正盛，似乎大家很快都会名利双收，真的是这样吗？这里不针对已经在成熟公司做到中高层人士参加创业发表意见，而是针对刚工作不久的同学提点个人的想法。</p>

<p>年纪的问题：创业的理由中经常听到的就是『年纪不小，再不创业就晚了；想乘着年轻赌一把，最多不过损失一到两年的工资』。一定要年轻才能创业吗？国内IT大佬真正成功时都不算年轻，在行业内摸爬滚打了多年才取得相应的成就。像我之前工作过的思科Webex，创始人朱敏文革时下放农村近十年，38岁才去美国留学，创办Webex时已经48岁，并不妨碍他成功创办十亿美元级公司（Webex上市数年后以四十亿刀卖给思科）。创业成功与否和你的能力运气相关，和年纪轻的关系真不大。这里不是USA，可以出现Facebook扎克伯格式的成功，在中国年轻就意味你的能力、工作经验和社会经历都不足，江湖险恶，你背后挨刀的可能多的是，你真的准备好了吗？你的职业生涯几十年呢，着个哪门子急呢？出名要乘早？那得先看看你有多少能力。</p>

<!--more-->


<p>个人能力的问题：如果个人能力还未准备充分，盲目参加创业等于去拥抱失败。大部分人要么只会编程，要么只会做产品经理，创业是个系统工程，你以为有技术、有想法就可以创业，忽视了产业化背后的品牌推广、市场营销、战略谋划、财务运营等关键要素，出去创业开办公司只会碰得满头包。如果仅仅是在创业公司做个工程师或者产品经理，那么对个人而言和大公司成熟的平台相比又有什么优势呢，你对于创业成败的影响力很小，没有在某一方面具备力挽狂澜的能力，参加创业仅仅是打另一份工而已。说得直白点仅仅是在赌，赌你的公司能否变成未来的百度或者阿里，彩票一样的概率。看看阿里、小米，创业时的核心团队都已经是在业界有份量或者经验能力一流的大拿了，优酷的CEO之前是搜狐的CFO，陌陌的CEO以前是网易的总编辑，他们是有备而来，你呢？如果你在成熟公司都不能做得风生水起，为何加入一家创业公司就可以？那里只会动荡、不规范并且鱼龙混杂。面试过很多创业失败又来找工作的同学，除了在你的简历上增加一条难看的履历外，你的能力和成长几乎是停滞的，那我为什么不招个在成熟技术公司锻炼的经验丰富，处事妥当的人呢？对于工作和创业我一直抱的是『个人事业和职业发展』的观念，在合适的时期做合适的事情，职业发展会历经几十年，锻炼好你的个人能力，将来创业也是水到渠成的事情。不是每个人都可以成为大佬，大佬也需要帮手，成为扎克伯格帮手的COO桑德伯格一样功成名就，放弃不切实际的幻想，考虑下你为什么要创业。</p>

<p>创业目的的问题：相当一部分人对创业有着魔般的热情，好像是上天对他的旨意。但是我想说别装了，大部分人的目的其实就是名和利。名就是幻想着成为业界大佬，指点江山；利就是赚个几亿变成土豪。别扯什么改变世界这种自欺欺人的说法了，目前你连改变目前自身财务状况和生活的能力都没有，扯什么改变世界，那是成功者事后的口号而已。Steve Jobs和Bill Gates当年创办公司也是抱着创立一番个人事业的想法，他们并不是第一步就能想到成为今天这样，Jobs 2007年回到Apple时还曾犹豫不决。我们应该做的是定下个人事业目标，用尽全力去争取达成，别把创业当成是自己的使命，那仅仅是实现个人价值的一种超高风险途径而已。</p>

<p>回报的问题：有些『创业者』拉我入伙时，张口闭口上万亿目标市场，万事具备，只差程序员了，但是我入伙能够得到什么回报呢？还有人说即使阿里给他0.01%的股份也就是2000万美金也不要，因为呆在大公司没劲，问我要不要。我去，你当你是谁啊，你说有0.01%股份就有啊，笑话。别说Money俗气，创业就得谈钱，难道你创业不是为了Money？你创业能有2000万美金身家退出已经算是成功了。Money是你创业成功与否的唯一证明，你自己赚不到钱难道还可以号称创业成功？如果不成功那创业的目的又是什么呢？满足自己当老板的虚荣心？这种创业和摆个地摊开个饭馆当老板没啥区别，别把创业当成是高人一等的行为，这仅仅是实现个人价值成就个人事业的一种手段而已，牛逼的人可以通过不同的途径达到相同的结果，创业本身一点不牛逼也不高尚。很多时候创业做出来的东西和几个朋友业余时间做出来的没啥大区别，然后呢？或许你自己都没想好怎么办。</p>

<p>不适合创业的人：应届生，中国应届生的社交能力普遍较差，在你技术实力和沟通能力还不足的情况下，盲目参加创业只会让你浪费宝贵的积累经验的机会，在成熟型公司锻炼几年，明显比你参加创业对你未来职业发展有更大的回报。</p>

<p>适合创业的人：只要你考虑过自己的能力、经验、运气以及机会成本，创业是你个人的选择，最重要的是你能够承受失败的结果，少些发大财的错觉，创业只是一种人生经历和个人价值实现的途径，肯定有不一样的路达成你的目标，成功永远来自于努力工作、运气和他人的帮助。有一天时机成熟，可能我也会真正尝试开拓自己掌控的事业，毕竟曾经也尝试过:-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何攀升计算机技能树]]></title>
    <link href="http://hrchen.com/2014/03/how-to-learn-computer-science/"/>
    <updated>2014-03-13T09:01:00+08:00</updated>
    <id>http://hrchen.com/2014/03/how-to-learn-computer-science</id>
    <content type="html"><![CDATA[<p>国内大部分情况下技术搞到一定程度就要转成管理，否则薪酬上不去，其实对于热爱技术的人而言是不公平的，每天花很多时间做PPT和项目管理真心无趣啊。不过近年来很多高级IT工程师岗位薪酬达到40W+已经却来越多了，不过要突破50W乃至60W+，大都还是意味着你要做管理性质的工作。情况在好转，只要你有核心技术实力，又在很好的技术发展方向上，工程师突破50W+难度没那么大。附张国内主流互联网公司薪酬范围表：</p>

<!--more-->


<p><img src="/images/post/money_list_2014.jpg"></p>

<p>要提升薪酬，其实和玩游戏攀升技能树没啥区别，在互联网时代，没有你学不到的知识，关键是不是找对道。计算机最重要的还是基础，例如iOS/Android开发现在很火热，5年后10年后呢，一定会有新的技术把它取代，就像当年的Symbian。那些搞Symbian开发的人如今只能转行，API和trick玩得再熟也没有意义了。IT行业每五年就会有一些热门的技术与发展方向冒出来，例如iOS、Android、大数据等等，火上几年，再被新技术取代。能否快速搭对车就得看你的计算机基础是否扎实了，够扎实无论做前端还是后端，或者现在流行的所谓Full Stack全栈工程师又有什么不可以呢？基础好，就能够快速吸收新的知识与技术。</p>

<p>怎么打好基础？按照Stanford的CS课程学一遍计算机科学系(Computer Science)的基础课程就行。学最好的课程、读最好的书，只要你不笨，这些真得有那么难吗？</p>

<p>Stanford的CS课程是围绕着系统+应用+理论(System+Application+Theory)的概念来开展的，系统就是将计算机科学中比较大的系统化知识核心划分为几个系统：</p>

<ul>
<li>计算机系统(Comupter System): 对应咱们的计算机体系结构之类的课程。</li>
<li>编程系统(Programming System): 包括编译原理、编程语言相关的所有理论知识和技术。</li>
<li>操作系统(Operating System)</li>
<li>数据库系统(Database System)</li>
<li>分布和网络系统(Distributed and Networking System)</li>
</ul>


<p>应用Application就是计算机中一些比较离散的知识，例如图像识别、自然语言处理这种独立体系的方向。</p>

<p>理论Theory就是离散数学、计算理论、算法这种相对理论的知识了。</p>

<p>看起来够零散吧，难怪计算机科学Computer Science总是被其他学科嘲笑，因为那些真正的科学都不会将自己的名字后面加上“科学”二字的，你见过物理科学系或者数学科学系么。</p>

<p>以下是推荐主要的CS课程，如果是后面带6.033这种数字则对应MIT课程，MIT的OCW项目可以找到对应课件。我觉得国外的计算机教育最棒的就是他们的Project设计，非常强调动手能力，Stanford的课程一般只有3周，却有大量的Project，要自学务必完成这些Project，真的非常有趣。要进入这些课程请自行Google。</p>

<p>Computer System:</p>

<ul>
<li>cs107 Computer Organization and Systems</li>
<li>cs110 Principles of Computer Systems  (6.033)</li>
</ul>


<p>Operating System:</p>

<ul>
<li>cs140 Operating Systems and Systems Programming (6.828)</li>
<li>cs240 Advanced Topics in Operating Systems</li>
</ul>


<p>Networking System:</p>

<ul>
<li>cs144 Introduction to Computer Networking (6.829)</li>
<li>cs244 Advanced Topics in Networking (6.855) (15.082J)</li>
<li>cs244B Distributed Systems (6.842) (6.852J)</li>
</ul>


<p>Database System:</p>

<ul>
<li>cs145 Introduction to Databases cs245Database System Principles</li>
<li>cs229T Statistical Learning Theory cs229Machine Learning</li>
<li>cs246 Mining Massive Data Sets</li>
<li>cs341 Project in Mining Massive Data Sets</li>
<li>cs276 Information Retrieval and Web Search</li>
<li>cs347 Parallel and Distributed Data Management</li>
<li>cs309A Cloud Computing</li>
</ul>


<p>Programming System:</p>

<ul>
<li>cs106A Programming Methodology</li>
<li>cs106B Programming Abstractions (C++)</li>
<li>cs106X Programming Abstractions (C++)</li>
<li>cs108 Object-Oriented Systems Design (Java)</li>
<li>cs143 Compilers cs192Programming Service Project</li>
<li>cs193C Client-Side Internet Technologies</li>
<li>cs106L Standard C++ Programming Laboratory</li>
<li>cs243 Program Analysis and Optimizations</li>
<li>cs343 Advanced Topics in Compilers</li>
<li>cs242 Programming Languages</li>
</ul>


<p>Applications:</p>

<ul>
<li>cs148 Introduction to Computer Graphics and Imaging</li>
<li>cs232 Digital Image Processing</li>
<li>cs224U Natural Language Understanding</li>
<li>cs224N Natural Language Processing</li>
<li>cs193P iPhone and iPad Application Programming</li>
<li>cs193A Android Programmingcs193E Cocoa Programming</li>
<li>cs142 Web Applications</li>
</ul>


<p>Theory:</p>

<ul>
<li>cs103 Mathematical Foundations of Computing</li>
<li>cs103A Discrete Mathematics for Computer Science</li>
<li>cs161 Design and Analysis of Algorithms</li>
<li>cs254 Computational Complexity</li>
<li>cs261 Optimization and Algorithmic Paradigms</li>
<li>cs361B Advanced Algorithms (6.854J)</li>
<li>cs469 Algorithms in Mobile Applications</li>
</ul>


<p>这些基础课程是计算机知识的核心基础，掌握牢靠后再去做iOS、Android、JS、亦或后台开发，自然心里有底。结合这些课程，记得读些好书，CSAPP、Richard Stevens的经典著作，都值得深读2~3遍。作为Programmer，动手永远都是最重要的，记得试试CSAPP里面那几个lab，很有趣。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[重新开始写Blog]]></title>
    <link href="http://hrchen.com/2013/05/my-first-blog/"/>
    <updated>2013-05-26T22:27:00+08:00</updated>
    <id>http://hrchen.com/2013/05/my-first-blog</id>
    <content type="html"><![CDATA[<p>最近好几次被问到有没有个人Blog，惭愧=。=~~~~虽然曾经搭过WordPress、注册过Blogger，都没能坚持下来，其实写Blog对技术人员来说是很好的总结方式，值得坚持。</p>

<p>既然要整blog，当然要用正夯的工具，目前最方便的就是github pages啦，搭个<a href="https://github.com/imathis/octopress">octopress</a>，找个漂亮<a href="https://github.com/shashankmehta/greyshade">主题</a>，直接上！发现markdown写起来蛮像读书时写论文用的<a href="http://www.latex-project.org/">LaTex</a>，可以让你专注于码字，而不是格式。</p>
]]></content>
  </entry>
  
</feed>
